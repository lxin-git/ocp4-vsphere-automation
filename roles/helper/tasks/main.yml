---
# Setup OCP4 Helper Node
  - name: generate ssh keys
    import_tasks: generate_ssh_keys.yaml
    when: ssh_gen_key

  - name: set setup facts
    include: set_facts_.yaml

  - name: Install needed packages
    package:
      name: "{{ packages }}"
      state: present
    environment:
      http_proxy: "{{ helper_vm.proxy_env }}"
      https_proxy: "{{ helper_vm.proxy_env }}"

  - name: Install packages for DHCP/PXE install
    package:
      name: "{{ dhcppkgs }}"
      state: present
    when: not staticips

  - name: Install additional package for Intel platforms
    package:
      name: "{{ syslinuxpkgs }}"
      state: present
    when: not staticips and not ppc64le

  - name: Write out dhcp file
    template:
      src: ../templates/dhcpd.conf.j2
      dest: /etc/dhcp/dhcpd.conf
    notify:
      - restart dhcpd
    when: not staticips

  - name: Write out named file
    template:
      src: ../templates/named.conf.j2
      dest: /etc/named.conf
    notify:
      - restart bind

  - name: Installing DNS Serialnumber generator
    copy:
      src: ../files/set-dns-serial.sh
      dest: /usr/local/bin/set-dns-serial.sh
      mode: '0555'

  - name: Set zone serial number
    shell: "/usr/local/bin/set-dns-serial.sh"
    register: dymanicserialnumber

  - name: Setting serial number as a fact
    set_fact:
      serialnumber: "{{ dymanicserialnumber.stdout }}"

  - name: Write out "{{ dns.domain | lower }}" zone file
    template:
      src: ../templates/zonefile.j2
      dest: /var/named/zonefile.db
    notify:
      - restart bind

  - name: Write out reverse zone file
    template:
      src: ../templates/reverse.j2
      dest: /var/named/reverse.db
    notify:
      - restart bind

  - name: Write out haproxy config file
    template:
      src: ../templates/haproxy.cfg.j2
      dest: /etc/haproxy/haproxy.cfg
    notify:
      - restart haproxy

  - name: Copy httpd conf file
    copy:
      src: ../files/httpd.conf
      dest: /etc/httpd/conf/httpd.conf
    notify:
      - restart httpd

  - name: Create apache directories for installing
    file:
      path: "{{ item }}"
      state: directory
      mode: 0755
    with_items:
      - /var/www/html/install
      - /var/www/html/ignition

  #- name: Delete OCP4 files, if requested, to download again
  #  file:
  #     state: absent
  #     path: "{{ item }}"
  #  with_items:
  #    - "/usr/local/src/openshift-client-linux.tar.gz"
  #    - "/usr/local/src/openshift-install-linux.tar.gz"
  #    - "/var/www/html/install/bios.raw.gz"
  #    - "/var/lib/tftpboot/rhcos/initramfs.img"
  #    - "/var/lib/tftpboot/rhcos/kernel"
  #  when: force_ocp_download

  #- name: Downloading OCP4 installer Bios
  #  get_url:
  #    url: "{{ ocp_bios}}"
  #    dest: /var/www/html/install/bios.raw.gz
  #    mode: 0555
  #  environment:
  #    http_proxy: "{{ helper_vm.proxy_env }}"
  #    https_proxy: "{{ helper_vm.proxy_env }}"

  - name: Start firewalld service
    systemd:
      name: firewalld
      state: started
      enabled: yes

  - name: Open up firewall ports
    firewalld:
      permanent: yes
      immediate: yes
      state: enabled
      port: "{{ item }}"
    with_items:
      - 67/udp
      - 53/tcp
      - 53/udp
      - 443/tcp
      - 80/tcp
      - 8080/tcp
      - 6443/tcp
      - 6443/udp
      - 22623/tcp
      - 22623/udp
      - 9000/tcp
      - 69/udp
      - 111/tcp
      - 2049/tcp
      - 20048/tcp
      - 50825/tcp
      - 53248/tcp

  - name: Best effort SELinux repair - DNS
    shell: "restorecon -vR /var/named || true"

  - name: Best effort SELinux repair - Apache
    shell: "restorecon -vR /var/www/html || true"

  - name: Create NFS export directory
    file:
      path: /export
      state: directory
      mode: 0777
      owner: "{{ owner }}"
      group: "{{ group }}"
    notify:
      - restart nfs

  - name: Copy NFS export conf file
    copy:
      src: ../files/nfs-exports
      dest: /etc/exports.d/nfs-provisioner.exports
    notify:
      - restart nfs

  - name: Create TFTP config
    file:
      path: /var/lib/tftpboot/pxelinux.cfg
      state: directory
      mode: 0755
    notify:
      - restart tftp
    when: not staticips and not ppc64le

  - name: generate netboot entry for grub2
    shell: grub2-mknetdir --net-directory=/var/lib/tftpboot
    when: not staticips and ppc64le

  - name: Create TFTP RHCOS dir
    file:
      path: /var/lib/tftpboot/rhcos
      state: directory
      mode: 0755
    when: not staticips

  - name: SEBool allow haproxy connect any port
    seboolean:
      name: haproxy_connect_any
      state: yes
      persistent: yes
    notify:
      - restart haproxy

  - name: Copy over files needed for TFTP
    shell: "cp -a /usr/share/syslinux/* /var/lib/tftpboot"
    when: not staticips and not ppc64le

  #- name: Downloading OCP4 installer initramfs
  #  get_url:
  #    url: "{{ ocp_initramfs }}"
  #    dest: /var/lib/tftpboot/rhcos/initramfs.img
  #    mode: 0555
  #  when: not staticips

  #- name: Downloading OCP4 installer kernel
  #  get_url:
  #    url: "{{ ocp_install_kernel }}"
  #    dest: /var/lib/tftpboot/rhcos/kernel
  #    mode: 0555
  #  when: not staticips

  - name: Generate pxe config files
    block:
    - name: Set the default tftp file
      template:
        src: ../templates/default.j2
        dest: /var/lib/tftpboot/pxelinux.cfg/default
        mode: 0555
      when: "{{ pxe.generate_default | default(false) }}"
      notify:
        - restart tftp

    - name: Set the bootstrap specific tftp file
      template:
        src: ../templates/pxe-bootstrap.j2
        dest: "/var/lib/tftpboot/pxelinux.cfg/01-{{ bootstrap.macaddr | regex_replace (':', '-')}}"
        mode: 0555
      notify:
        - restart tftp

    - name: Set the master specific tftp files
      template:
        src: ../templates/pxe-master.j2
        dest: "/var/lib/tftpboot/pxelinux.cfg/01-{{ item.macaddr | regex_replace (':', '-')}}"
        mode: 0555
      with_items: "{{ masters | lower }}"
      notify:
        - restart tftp

    - name: Set the worker specific tftp files
      template:
        src: ../templates/pxe-worker.j2
        dest: "/var/lib/tftpboot/pxelinux.cfg/01-{{ item.macaddr | regex_replace (':', '-')}}"
        mode: 0555
      with_items: "{{ workers | lower }}"
      notify:
        - restart tftp
    when: not staticips and not ppc64le

  - name: Generate grub2 config files
    block:
    - name: create grub.cfg
      copy:
        dest: /var/lib/tftpboot/boot/grub2/grub.cfg
        content: |
          default=0
          fallback=1
          timeout=1

    - name: generate grub entry (bootstrap)
      vars:
        role: bootstrap
        mac: "{{ bootstrap.macaddr }}"
      include_tasks: generate_grub.yml

    - name: generate grub entry (masters)
      vars:
        role: master
        mac: "{{ item.macaddr }}"
      include_tasks: generate_grub.yml
      with_items: "{{ masters }}"

    - name: generate grub entry (workers)
      vars:
        role: worker
        mac: "{{ item.macaddr }}"
      include_tasks: generate_grub.yml
      with_items: "{{ workers }}"
    when: not staticips and ppc64le


  - name: Installing TFTP Systemd helper
    copy:
      src: ../files/start-tftp.sh
      dest: /usr/local/bin/start-tftp.sh
      mode: '0555'
    when: not staticips

  - name: Installing TFTP Systemd unit file
    copy:
      src: ../files/helper-tftp.service
      dest: /etc/systemd/system/helper-tftp.service
      mode: '0655'
    when: not staticips

  - name: Systemd daemon reload
    systemd:
      daemon_reload: yes
    when: not staticips

  - name: Starting services
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - "{{ services }}"

  - name: Starting DHCP/PXE services
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - dhcpd
      - tftp
      - helper-tftp
    when: not staticips

  - name: Unmasking Services
    systemd:
      name: "{{ item }}"
      enabled: yes
      masked: no
    with_items:
      - tftp
    when: not staticips

  - name: Set the local resolv.conf file
    template:
      src: ../templates/resolv.conf.j2
      dest: /etc/resolv.conf

  - name: Copy info script over
    template:
      src: ../templates/checker.sh.j2
      dest: /usr/local/bin/helpernodecheck
      owner: root
      group: root
      mode: 0555

  - name: Copying over nfs-provisioner rbac
    copy:
      src: ../files/nfs-provisioner-rbac.yaml
      dest: /usr/local/src/nfs-provisioner-rbac.yaml
      owner: root
      group: root
      mode: 0666

  - name: Copying over nfs-provisioner deployment
    template:
      src: ../templates/nfs-provisioner-deployment.yaml.j2
      dest: /usr/local/src/nfs-provisioner-deployment.yaml
      owner: root
      group: root
      mode: 0666

  - name: Copying over nfs-provisioner storageclass
    copy:
      src: ../files/nfs-provisioner-sc.yaml
      dest: /usr/local/src/nfs-provisioner-sc.yaml
      owner: root
      group: root
      mode: 0666

  - name: Copying over nfs-provisioner setup script
    copy:
      src: ../files/nfs-provisioner-setup.sh
      dest: /usr/local/bin/nfs-provisioner-setup.sh
      owner: root
      group: root
      mode: 0555

  - name: Copying over a sample PVC file for NFS
    copy:
      src: ../files/registry-pvc.yaml
      dest: /usr/local/src/registry-pvc.yaml
      mode: '0555'

  - name: Chrony configuration
    block:
    - name: Create folder for additional machineconfig
      file:
        path: ../machineconfig
        state: directory

    - name: Create temporary chrony.conf file
      template:
        src: ../templates/chrony.conf.j2
        dest: /tmp/chrony.conf.tmp

    - name: slurp contents of temporary chrony.conf file
      slurp:
        src: /tmp/chrony.conf.tmp
      register: chronybase64

    - name: Generate Chrony machineconfig
      template:
        src: ../templates/chrony-machineconfig.j2
        dest: ../machineconfig/99-{{item}}-chrony-configuration.yaml
      loop:
        - master
        - worker
    when: chronyconfig.enabled

  #- name: Downloading OCP4 client
  #  get_url:
  #    url: "{{ ocp_client }}"
  #    dest: /usr/local/src/openshift-client-linux.tar.gz
  #  environment:
  #    http_proxy: "{{ helper_vm.proxy_env }}"
  #    https_proxy: "{{ helper_vm.proxy_env }}"

  #- name: Downloading OCP4 Installer
  #  get_url:
  #    url: "{{ ocp_installer }}"
  #    dest: /usr/local/src/openshift-install-linux.tar.gz
  #  environment:
  #    http_proxy: "{{ helper_vm.proxy_env }}"
  #    https_proxy: "{{ helper_vm.proxy_env }}"

  #- name: Unarchiving OCP4 client
  #  unarchive:
  #    src: /usr/local/src/openshift-client-linux.tar.gz
  #    dest: /usr/local/bin
  #    remote_src: yes

  #- name: Unarchiving OCP4 Installer
  #  unarchive:
  #    src: /usr/local/src/openshift-install-linux.tar.gz
  #    dest: /usr/local/bin
  #    remote_src: yes

  - name: Removing files that are not needed
    file:
      path: /usr/local/bin/README.md
      state: absent

  - name: Create helm source directory
    file:
      path: "{{ item }}"
      state: directory
      mode: 0755
    with_items:
      - /usr/local/src/helm

  - name: Downloading helm source binary tarball
    get_url:
      url: "{{ helm_source }}"
      dest: /usr/local/src/helm/helm-client.tar.gz
    environment:
      http_proxy: "{{ helper_vm.proxy_env }}"
      https_proxy: "{{ helper_vm.proxy_env }}"

  - name: Unarchiving helm tarball
    unarchive:
      src: /usr/local/src/helm/helm-client.tar.gz
      dest: /usr/local/src/helm
      remote_src: yes

  - name: Copy helm cli to bin directory for amd64
    copy:
      src: /usr/local/src/helm/linux-amd64/helm
      dest: /usr/local/bin/helm
      owner: root
      group: root
      mode: '0755'
      remote_src: true
    when: not ppc64le

  - name: Copy helm cli to bin directory for ppc64le
    copy:
      src: /usr/local/src/helm/linux-ppc64le/helm
      dest: /usr/local/bin/helm
      owner: root
      group: root
      mode: '0755'
      remote_src: true
    when: ppc64le

  - name: Downloading filetranspiler source
    git:
      repo: https://github.com/ashcrow/filetranspiler
      dest: /usr/local/src/filetranspiler
    when: install_filetranspiler

  - name: Building filetranspiler
    shell: "podman build /usr/local/src/filetranspiler -t filetranspiler:latest"
    when: install_filetranspiler

  - name: Installing filetranspiler
    copy:
      src: ../files/filetranspiler
      dest: /usr/local/bin/filetranspiler
      mode: '0555'
    when: install_filetranspiler

  - name: Get network device system name
    shell: "nmcli -t dev show {{ networkifacename }} | grep GENERAL.CONNECTION | cut -d: -f2"
    register: devicesystemname

  - name: Setting network device system name as a fact
    set_fact:
      dsname: "{{ devicesystemname.stdout }}"

  - name: Setting DNS server ip on network interface "{{ dsname }}" to 127.0.0.1
    shell: 'nmcli con mod "{{ dsname }}" ipv4.dns 127.0.0.1'

  - name: Setting DNS search path on network interface "{{ dsname }}" to "{{ dns.clusterid }}.{{ dns.domain | lower }}"
    shell: 'nmcli con mod  "{{ dsname }}" ipv4.dns-search {{ dns.clusterid }}.{{ dns.domain | lower }}'

  - name: Restarting NetworkManager
    service:
      name: "{{ item }}"
      state: restarted
    with_items:
      - NetworkManager

  - name: Setup Local Registry
    when: setup_registry.deploy
    block:
    - name: Install registry packages
      package:
        name: "{{ registry_pkg }}"
        state: present

    - name: Setup Registry
      import_tasks: setup_registry.yaml

  - name:  Information about this install
    debug:
      msg:
        - "Please run /usr/local/bin/helpernodecheck for information"

  - name: Post install to avoid dns recovered by nmcli 1
    command: "nmcli con mod {{ helper_vm.public_nic }} -ipv4.dns {{ item }}"
    with_items:
      - "{{ helper_vm.public_dns1 }}"
      - "{{ helper_vm.public_dns2 }}"

  - name: Post install to avoid dns recovered by nmcli 2
    command: "nmcli con up {{ helper_vm.public_nic }}"
